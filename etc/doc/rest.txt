Graffiti REST protcol.

=============================================================
Access Control
=============================================================

Most REST calls require authentication. The ones that don't are marked.

Posting to /api/player/login or /api/player/new creates a new user session.
These return an access token which must be sent on all subsequent requests:
  Authorization: Bearer ACCESSTOKEN
  
Passwords are optional.
If you create a player without one, it is only good for the duration of the session.

Sessions permanently log out after some interval of inactivity.

*** For now at least, the server has no persistence, so a server restart wipes the user list. ***

=============================================================
Endpoints
=============================================================

-------------------------------------------------------------
GET /api/time
=> Current time, ISO 8601
Unauthenticated

GET /api/selftest
Unauthenticated
Perform self-test and dump info to the server's log -- no results sent to client.

-------------------------------------------------------------
POST /api/player/login?name
Unauthenticated
<= password
=> {
  accessToken: string
  userId: string
}

POST /api/player/new?name
Unauthenticated
<= password
=> {
  accessToken: string
  userId: string
}
Omit password for one-time login.

DELETE /api/player

POST /api/player/logout

POST /api/player/update?name
=> {
  id: string
  name: string
}

POST /api/player/password
<= {
  old: string
  new: string
}

-------------------------------------------------------------
POST /api/room/new
=> Room
You are the owner of the new room, and you are joined to it automatically.

GET /api/room?[id]
=> Room
Omit id to get the joined room.

DELETE /api/room?[id]

PUT /api/room?[id]
<= Room
=> Room

POST /api/room/join?id
=> Room

POST /api/room/leave

Player may join no more than one room at a time.

-------------------------------------------------------------
GET /api/poll
=> {
  changes: [{
    type: "user" | "room" // store entity types; may add others in the future
    entity: {...} // always has an "id"
  }]
}

The same entity will not be listed twice.
This call will stall until at least one change is present.
If it times out, sleep a little and call again.
Changes that occur during your sleep will still be reported, no worries.
This is an alternative to websocket.

=============================================================
Types
=============================================================

//TODO declare types here after reorganizing services
