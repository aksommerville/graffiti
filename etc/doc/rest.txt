Graffiti REST protcol.

=============================================================
Access Control
=============================================================

Most REST calls require authentication. The ones that don't are marked.

Posting to /api/player/login or /api/player/new creates a new user session.
These return an access token which must be sent on all subsequent requests:
  Authorization: Bearer ACCESSTOKEN
  
Passwords are optional.
If you create a player without one, it is only good for the duration of the session.

Sessions permanently log out after some interval of inactivity.

*** For now at least, the server has no persistence, so a server restart wipes the user list. ***

=============================================================
Endpoints
=============================================================

-------------------------------------------------------------
GET /api/time
=> Current time, ISO 8601
Unauthenticated

POST /api/selftest
Unauthenticated
Perform self-test and dump info to the server's log -- no results sent to client.

-------------------------------------------------------------
POST /api/player/login?id
Unauthenticated
<= password
=> {
  accessToken: string
  name: string
}

POST /api/player/new?name[&id]
Unauthenticated
<= password
=> {
  accessToken: string
  name: string
}

DELETE /api/player

POST /api/player/logout

-------------------------------------------------------------
POST /api/room/new
=> Room
Initially empty, you must join explicitly.

GET /api/room?id
=> Room

DELETE /api/room?id

PUT /api/room?id
<= Room
=> Room

POST /api/room/join?id
=> Room

POST /api/room/leave

Player may join no more than one room at a time.

=============================================================
Types
=============================================================

Room {
  id: string
  ownerId: string
  players: Player[]
  state: "gather" | "play" | "conclude" | "cancel"
  startTime: ms
  endTime: ms
  permitObservation: boolean // can players see this room's content without joining?
  openToPublic: boolean // can everybody join? (for now this is mandatory)
  permitMutation: boolean // if true, anyone who can read it can also write (otherwise only the owner)
}

Player {
  id: string // canonical user id
  name: string // for display
}
